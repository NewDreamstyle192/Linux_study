1 通过yum将vim升级至vim8：
	rpm -Uvh http://mirror.ghettoforge.org/distributions/gf/gf-release-latest.gf.el7.noarch.rpm
	rpm --import http://mirror.ghettoforge.org/distributions/gf/RPM-GPG-KEY-gf.el7
	yum -y remove vim-minimal vim-common vim-enhanced sudo
	yum -y --enablerepo=gf-plus install vim-enhanced sudo
	
2 Linux + github
	yum -y install git 
	git config --global user.name "git的用户名"
	git config --global user.email "git的邮箱"
	ssh-keygen -t rsa -C "git的邮箱"
	cat "你的密钥保存地址，(看终端上面显示)"
	"复制密钥（最后的邮箱 不要复制）"
	"回到浏览器登陆github，---settings--SSH and GPG keys--- 粘贴----New SSH key"
3 编译运行C程序
	gcc -o "编译后文件名" "程序名" (-lpthread 使用到多线程库的时候)
	./ "编译后文件名"
	
-------------------”2020/06/01“
	"因为之前的云盘被我搞得一团糟，初始化了云盘，考虑到配置一个完美的vim编辑器，形成自己的ide是很不容易的
	"至少有以下几点：
	"cmake
	"yum
	"shell脚本编程
	"vundle等插件管理器
	"程序在vim里面的快捷编译
	------------------------------------------------------------暂时先配置最基础的vimrc(语法高亮，甚至还没有自动补全)
4 插件管理器 Vundle/vim-plug【目前处于初学阶段还是使用vundle妥当，日后再说vim-plug】
	git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim
	"安装插件：直接在vimrc里面 :PluginInstall / 命令行：vim +PlugInstall +qall
	"查看插件：：PlugList
	
5 代码自动补全YCM插件由于需要的东西太多，暂时不敢瞎几把安装
6 升级至python3，同样暂时不装

7 gcc编译及调试
	gcc -c hello.c 			将会自动产生helloc.o这个文件但是不会产生二进制执行文件，根据操作环境给与最佳执行速度
	gcc -o hello.exe hello.c       -o后面跟着的是将要输出的二进制文件名 
	

	1: 主子程序链接：子程序的编译---
	gcc -c "...c/cpp"将产生目标文件(...o)，可以不包含main函数
	gcc -o "...o" 便可以更好的编译
	2：调用外部的函数库：加入链接的函数库
	"首先注意在linux下 函数库是默认放在 usr/lib和usr、lib64中的 gcc后面就不要再追加-L/lib -L、lib64了	
	gcc -o producer_consumer.exe producer_consumer.c -lpthread(在最后加上 -l+函数库) 

8 make宏编译
	vim makefile
	"然后编写makefile（main:, clean: 还可以使用变量！）
	make
	make clean main / make main /make clean
	"即可完成编译	
----------------------"2020 06 09"
----------------------接下来就是python这个重头戏！
9 vim快捷编译及调试

10 wget下载命令：https://linuxize.com/post/wget-command-examples/
	wget [options] [url]
	wget url: 直接安装在当前工作目录
	wget -p "file_path" url :安装在指定目录
	


	
	
		
